{"key": "extract_func_headers", "query": "def fetch_user_profile(uid: str) -> UserProfile", "doc": "def fetch_user_profile(uid: str) -> UserProfile:\n    \"\"\"Fetch profile for a given user id.\"\"\"\n    return DB.get(uid)", "id": "user_service.py#fetch_user_profile"}
{"key": "extract_func_headers", "query": "def calculate_total(items: list[Item]) -> float", "doc": "def calculate_total(items: list[Item]) -> float:\n    total = sum(item.price for item in items)\n    return total", "id": "cart.py#calculate_total"}
{"key": "extract_func_headers", "query": "def send_email(recipient: str, subject: str) -> None", "doc": "def send_email(recipient: str, subject: str) -> None:\n    smtp.send(recipient, subject)", "id": "mailer.py#send_email"}
{"key": "extract_func_headers", "query": "def hash_password(password: str) -> str", "doc": "def hash_password(password: str) -> str:\n    return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()", "id": "auth.py#hash_password"}
{"key": "extract_func_headers", "query": "def create_session(user_id: str) -> Session", "doc": "def create_session(user_id: str) -> Session:\n    session = Session(user_id)\n    sessions.save(session)\n    return session", "id": "session.py#create_session"}
{"key": "extract_md_annotations", "query": "### fetch_user_profile\nReturns detailed profile data.", "doc": "### fetch_user_profile\nFetches full user profile including preferences and usage stats.", "id": "README.md#fetch_user_profile"}
{"key": "extract_md_annotations", "query": "### calculate_total\nComputes cart total price.", "doc": "### calculate_total\nCalculates the grand total of the items in the cart.", "id": "docs/cart.md#calculate_total"}
{"key": "extract_md_annotations", "query": "### send_email\nSends an email to a recipient.", "doc": "### send_email\nUtility function to send an email via SMTP.", "id": "docs/mailer.md#send_email"}
{"key": "extract_md_annotations", "query": "### hash_password\nHashes a plaintext password.", "doc": "### hash_password\nGenerates a secure hash for the provided plaintext password.", "id": "docs/auth.md#hash_password"}
{"key": "extract_md_annotations", "query": "### create_session\nCreates a new session for the user.", "doc": "### create_session\nCreates and stores a new user session.", "id": "docs/session.md#create_session"}
{"key": "extract_config_keys", "query": "db_host: localhost", "doc": "db_host: localhost\nport: 5432", "id": "config.yaml#db_host"}
{"key": "extract_config_keys", "query": "cache_ttl: 3600", "doc": "cache_ttl: 3600\ncache_backend: redis", "id": "config.yaml#cache_ttl"}
{"key": "extract_config_keys", "query": "smtp_server: mail.example.com", "doc": "smtp_server: mail.example.com\nsmtp_port: 587", "id": "config.yaml#smtp_server"}
{"key": "extract_config_keys", "query": "jwt_expiration: 24h", "doc": "jwt_expiration: 24h\njwt_algorithm: HS256", "id": "config.yaml#jwt_expiration"}
{"key": "extract_config_keys", "query": "log_level: INFO", "doc": "log_level: INFO\nlog_file: /var/log/app.log", "id": "config.yaml#log_level"}
{"key": "extract_test_cases", "query": "def test_fetch_user_profile():", "doc": "def test_fetch_user_profile():\n    profile = fetch_user_profile('u123')\n    assert profile.id == 'u123'", "id": "test_user_service.py#test_fetch_user_profile"}
{"key": "extract_test_cases", "query": "def test_calculate_total():", "doc": "def test_calculate_total():\n    items = [Item(price=10), Item(price=20)]\n    assert calculate_total(items) == 30", "id": "test_cart.py#test_calculate_total"}
{"key": "extract_test_cases", "query": "def test_send_email_success():", "doc": "def test_send_email_success():\n    result = send_email('a@b.com','hi')\n    assert result is None", "id": "test_mailer.py#test_send_email_success"}
{"key": "extract_test_cases", "query": "def test_hash_password():", "doc": "def test_hash_password():\n    hashed = hash_password('secret')\n    assert hashed != 'secret'", "id": "test_auth.py#test_hash_password"}
{"key": "extract_test_cases", "query": "def test_create_session():", "doc": "def test_create_session():\n    s = create_session('u123')\n    assert s.user_id == 'u123'", "id": "test_session.py#test_create_session"}
